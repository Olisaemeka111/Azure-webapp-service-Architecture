name: 'Dependency Update'

on:
  schedule:
    - cron: '0 6 * * 1' # Weekly on Monday at 6 AM
  workflow_dispatch:

env:
  TF_VERSION: '1.12.2'

jobs:
  dependency-update:
    name: 'Update Dependencies'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Check for Terraform Updates
      run: |
        echo "## 🔄 Dependency Update Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Terraform Version Check" >> $GITHUB_STEP_SUMMARY
        
        CURRENT_VERSION=$(terraform version -json | jq -r '.terraform_version')
        LATEST_VERSION=$(curl -s https://api.github.com/repos/hashicorp/terraform/releases/latest | jq -r '.tag_name' | sed 's/v//')
        
        echo "- **Current Version**: $CURRENT_VERSION" >> $GITHUB_STEP_SUMMARY
        echo "- **Latest Version**: $LATEST_VERSION" >> $GITHUB_STEP_SUMMARY
        
        if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
          echo "- ⚠️ **Update Available**: Consider updating to $LATEST_VERSION" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ✅ **Up to Date**: Using latest version" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Check Azure Provider Updates
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Azure Provider Updates" >> $GITHUB_STEP_SUMMARY
        
        # Get current provider version from versions.tf
        CURRENT_PROVIDER=$(grep -o 'version = "[^"]*"' versions.tf | head -1 | sed 's/version = "//;s/"//')
        LATEST_PROVIDER=$(curl -s https://registry.terraform.io/providers/hashicorp/azurerm | grep -o 'data-version="[^"]*"' | head -1 | sed 's/data-version="//;s/"//')
        
        echo "- **Current Provider Version**: $CURRENT_PROVIDER" >> $GITHUB_STEP_SUMMARY
        echo "- **Latest Provider Version**: $LATEST_PROVIDER" >> $GITHUB_STEP_SUMMARY
        
        if [ "$CURRENT_PROVIDER" != "$LATEST_PROVIDER" ]; then
          echo "- ⚠️ **Update Available**: Consider updating to $LATEST_PROVIDER" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ✅ **Up to Date**: Using latest provider version" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Check GitHub Actions Updates
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### GitHub Actions Updates" >> $GITHUB_STEP_SUMMARY
        
        # Check for outdated actions
        echo "Checking for outdated GitHub Actions..." >> $GITHUB_STEP_SUMMARY
        
        # List of actions to check
        ACTIONS=(
          "actions/checkout@v4"
          "hashicorp/setup-terraform@v3"
          "azure/login@v1"
          "azure/setup-azcli@v1"
          "actions/upload-artifact@v4"
          "actions/github-script@v7"
        )
        
        for action in "${ACTIONS[@]}"; do
          echo "- **$action**: Check for updates in GitHub marketplace" >> $GITHUB_STEP_SUMMARY
        done

    - name: Create Update Issue
      if: github.event_name == 'schedule'
      uses: actions/github-script@v7
      with:
        script: |
          const issueBody = `
          ## 🔄 Weekly Dependency Update Report
          
          **Date**: ${new Date().toISOString().split('T')[0]}
          
          ### 📋 Update Checklist
          
          #### Terraform & Providers
          - [ ] Check Terraform version updates
          - [ ] Review Azure provider updates
          - [ ] Test provider compatibility
          - [ ] Update version constraints if needed
          
          #### GitHub Actions
          - [ ] Review action updates
          - [ ] Test updated actions in development
          - [ ] Update action versions
          - [ ] Verify workflow functionality
          
          #### Security Updates
          - [ ] Review security advisories
          - [ ] Update vulnerable dependencies
          - [ ] Run security scans after updates
          - [ ] Test infrastructure after updates
          
          ### 🧪 Testing Plan
          1. Create test branch for updates
          2. Run Terraform plan with new versions
          3. Deploy to development environment
          4. Run security scans
          5. Verify all functionality works
          6. Create PR with updates
          
          ### 📚 Resources
          - [Terraform Release Notes](https://github.com/hashicorp/terraform/releases)
          - [Azure Provider Release Notes](https://github.com/hashicorp/terraform-provider-azurerm/releases)
          - [GitHub Actions Marketplace](https://github.com/marketplace?type=actions)
          
          ---
          *This issue was automatically generated by the Dependency Update workflow.*
          `;
          
          // Check if similar issue already exists
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'dependency-update',
            state: 'open'
          });
          
          if (issues.data.length === 0) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🔄 Dependency Update Report - ${new Date().toISOString().split('T')[0]}`,
              body: issueBody,
              labels: ['dependency-update', 'maintenance', 'automated']
            });
          }

    - name: Update Summary
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📝 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Review the update recommendations above" >> $GITHUB_STEP_SUMMARY
        echo "2. Test updates in development environment" >> $GITHUB_STEP_SUMMARY
        echo "3. Create pull request with updates" >> $GITHUB_STEP_SUMMARY
        echo "4. Run security scans after updates" >> $GITHUB_STEP_SUMMARY
        echo "5. Deploy to production after testing" >> $GITHUB_STEP_SUMMARY
