name: 'Cost Optimization'

on:
  schedule:
    - cron: '0 9 * * 1' # Weekly on Monday at 9 AM
  workflow_dispatch:

env:
  TF_VERSION: '1.12.2'
  AZURE_CLI_VERSION: '2.53.0'

jobs:
  cost-analysis:
    name: 'Cost Analysis'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Azure CLI
      uses: azure/setup-azcli@v1
      with:
        azure-cli-version: ${{ env.AZURE_CLI_VERSION }}

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get Resource Group Costs
      run: |
        echo "## ðŸ’° Cost Analysis Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Resource Group: azure-app-arch-prod-rg" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Get cost analysis for the last 30 days
        az consumption usage list \
          --billing-period-name $(az billing period list --query '[0].name' -o tsv) \
          --start-date $(date -d '30 days ago' +%Y-%m-%d) \
          --end-date $(date +%Y-%m-%d) \
          --query "[?contains(instanceName, 'azure-app-arch')].{Resource:instanceName, Cost:pretaxCost, Currency:currency}" \
          --output table >> cost_report.txt || echo "No cost data available" >> cost_report.txt
        
        echo "### Cost Breakdown:" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat cost_report.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Resource Optimization Recommendations
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸŽ¯ Optimization Recommendations:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "1. **App Service Plan**: Consider using Basic tier for development environments" >> $GITHUB_STEP_SUMMARY
        echo "2. **SQL Database**: Review DTU usage and consider scaling down if underutilized" >> $GITHUB_STEP_SUMMARY
        echo "3. **Front Door**: Monitor bandwidth usage and optimize caching rules" >> $GITHUB_STEP_SUMMARY
        echo "4. **Storage**: Implement lifecycle policies for log retention" >> $GITHUB_STEP_SUMMARY
        echo "5. **Monitoring**: Review Application Insights sampling rates" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“Š Resource Utilization:" >> $GITHUB_STEP_SUMMARY
        
        # Get resource utilization metrics
        az monitor metrics list \
          --resource "/subscriptions/$(az account show --query id -o tsv)/resourceGroups/azure-app-arch-prod-rg" \
          --metric "CpuPercentage" \
          --aggregation "Average" \
          --interval "PT1H" \
          --start-time $(date -d '7 days ago' --iso-8601) \
          --end-time $(date --iso-8601) \
          --query "value[0].timeseries[0].data[-1].average" \
          --output tsv > cpu_usage.txt || echo "N/A" > cpu_usage.txt
        
        echo "- **Average CPU Usage (7 days)**: $(cat cpu_usage.txt)%" >> $GITHUB_STEP_SUMMARY

    - name: Create Cost Optimization Issue
      if: github.event_name == 'schedule'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let costReport = 'No cost data available';
          
          try {
            costReport = fs.readFileSync('cost_report.txt', 'utf8');
          } catch (error) {
            console.log('Could not read cost report file');
          }
          
          const issueBody = `
          ## ðŸ’° Weekly Cost Optimization Report
          
          **Date**: ${new Date().toISOString().split('T')[0]}
          **Environment**: Production
          
          ### Cost Summary
          \`\`\`
          ${costReport}
          \`\`\`
          
          ### Recommendations
          1. Review App Service Plan sizing
          2. Optimize SQL Database DTU allocation
          3. Implement resource tagging for better cost tracking
          4. Consider reserved instances for predictable workloads
          5. Set up cost alerts and budgets
          
          ### Next Steps
          - [ ] Review current resource utilization
          - [ ] Implement cost optimization recommendations
          - [ ] Set up automated cost alerts
          - [ ] Schedule regular cost reviews
          
          ---
          *This issue was automatically generated by the Cost Optimization workflow.*
          `;
          
          // Check if similar issue already exists
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'cost-optimization',
            state: 'open'
          });
          
          if (issues.data.length === 0) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸ’° Cost Optimization Report - ${new Date().toISOString().split('T')[0]}`,
              body: issueBody,
              labels: ['cost-optimization', 'automated']
            });
          }
